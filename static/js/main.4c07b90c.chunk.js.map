{"version":3,"sources":["types.ts","utils/formatMoney.ts","components/CurrencyInput/CurrencyInput.style.ts","utils/noop.ts","components/CurrencyInput/CurrencyInput.tsx","constants/colors.ts","components/ExchangeWidget/WidgetBlock/WidgetBlock.style.ts","components/Slider/Slider.tsx","constants/common.ts","components/ExchangeWidget/WidgetBlock/WidgetBlock.tsx","components/ExchangeWidget/ExchangeWidget.style.ts","components/ExchangeWidget/SubmitButton/SubmitButton.style.ts","components/ExchangeWidget/SubmitButton/SubmitButton.tsx","actions/ActionTypes.ts","components/ExchangeWidget/ExchangeWidget.tsx","actions/updateRates.ts","actions/changeCurrency.ts","utils/path.ts","components/ExchangeWidget/ExchangeWidgetContainer.tsx","actions/exchange.ts","store/reducers/rates.ts","store/reducers/pockets.ts","store/reducers/exchange.ts","store/reducers/index.ts","store/index.ts","components/App/App.tsx","index.tsx"],"names":["FieldType","symbols","RUB","USD","EUR","GBP","optionsMap","as-is","maximumFractionDigits","always","minimumFractionDigits","none","formatMoney","val","currency","_ref$fractions","arguments","length","undefined","fractions","toLocaleString","generateClassName","css","_templateObject","noop","CurrencyInput","handleChange","_ref","value","_this$props","_this","props","name","prefix","newVal","slice","onChange","_this2","this","_this$props2","getRef","react_default","a","createElement","core_browser_esm","_ref2","number_format_default","getInputRef","className","decimalScale","allowNegative","maxLength","thousandSeparator","onValueChange","PureComponent","defaultProps","colors","Row","styled","div","WidgetBlock_style_templateObject","ExchangeBlock","_templateObject2","Wrapper","type","Source","concat","SecondaryText","_templateObject3","Slide","Slider_templateObject","Slider","slider","scrollBlock","refSlider","el","refScrollBlock","querySelector","i","scrollLeft","onSlide","prevProps","currentSlide","slickGoTo","children","speed","ref","lib_default","dots","arrows","initialSlide","infinite","afterChange","React","Children","map","child","EXCHANGE_API","DEFAULT_CURRENCY_ORDER","WigdetBlock","inputRefs","handleSlideClick","event","focusInput","currentTarget","dataset","handleSlide","index","newCurrency","onCurrencyChange","setInputRef","memoize","primitive","renderSlide","pockets","inputValue","onAmountChange","valueFieldName","extraContent","key","data-currency","onClick","components_CurrencyInput_CurrencyInput","focus","_this$props3","components_Slider_Slider","indexOf","Content","ExchangeWidget_style_templateObject","ErrorString","ExchangeWidget_style_templateObject2","Button","button","SubmitButton_style_templateObject","success","CheckIcon","svg","SubmitButton_style_templateObject2","_ref3","_ref4","Text","span","SubmitButton_style_templateObject3","_ref5","_ref6","_ref7","ExchnageButton","state","timer","handleClick","e","clearTimeout","setState","window","setTimeout","disabled","viewBox","d","ActionType","ExchangeWidget","sourceCurrency","targetCurrency","sourceAmount","targetAmount","rate","onExchange","valid","errorMsg","WidgetBlock","Target","SubmitButton","updateRates","dispatch","getState","exchange","RATES_REQUEST","payload","baseCurrency","fetch","then","response","json","_ref$rates","rates","RATES_REQUEST_SUCCESS","getNextCurrency","path","obj","paths","idx","getOppositeFieldName","ExchangeWidgetContainer","updateTimer","handleAmountChange","_this$setState","Object","defineProperty","calcAmount","handleExchange","_this$state","validate","max","setInterval","clearInterval","lastUpdatedField","fieldName","oppositeVal","realRate","Math","round","_this$state2","components_ExchangeWidget_ExchangeWidget","assign","Component","connect","EXCHANGE","SOURCE_CURRENCY_CHANGE","TARGET_CURRENCY_CHANGE","oppositeCurrency","changeCurrency","initState","action","_action$payload","objectSpread","_objectSpread2","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Container","App_templateObject","App_templateObject2","App","es","App_Content","ExchangeWidget_ExchangeWidgetContainer","ReactDOM","render","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.4c07b90c.chunk.js","sourcesContent":["import React from 'react';\nimport { ActionType } from './actions/ActionTypes';\n\nexport type TCurrency = 'RUB' | 'USD' | 'EUR' | 'GBP';\n\nexport interface IFieldCallback {\n  (\n    e: React.SyntheticEvent<HTMLElement> | null,\n    obj: {\n      value: string;\n      name?: string;\n    }\n  ): void;\n}\n\nexport interface IAction {\n  type: ActionType;\n  payload: {\n    [key: string]: any;\n  };\n}\n\nexport enum FieldType {\n  Source,\n  Target\n}\n","import { TCurrency } from '../types';\n\nconst symbols = {\n  RUB: '₽',\n  USD: '$',\n  EUR: '€',\n  GBP: '£'\n};\n\nconst optionsMap = {\n  'as-is': {\n    maximumFractionDigits: 2\n  },\n  always: {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  },\n  none: {\n    maximumFractionDigits: 0\n  }\n};\n\nconst formatMoney = (\n  val: number,\n  currency: TCurrency,\n  { fractions = 'as-is' }: { fractions?: 'as-is' | 'always' | 'none' } = {}\n): string =>\n  symbols[currency] + val.toLocaleString(undefined, optionsMap[fractions]);\n\nexport default formatMoney;\n","export const generateClassName = (css: Function) =>\n  css`\n    background: none;\n    border: none;\n    color: inherit;\n    font-size: inherit;\n    text-align: right;\n    outline: none;\n    min-width: 50px;\n    padding: 0;\n    margin: 0;\n\n    ::-ms-clear {\n      display: none;\n    }\n  `;\n","export default () => {};\n","import React, { PureComponent } from 'react';\nimport { IFieldCallback } from '../../types';\nimport NumberFormat from 'react-number-format';\nimport { ClassNames } from '@emotion/core';\nimport { generateClassName } from './CurrencyInput.style';\nimport noop from '../../utils/noop';\n\ninterface IInputProps {\n  prefix?: '+' | '-';\n  name?: string;\n  value?: number | null;\n  onChange: IFieldCallback;\n  getRef: React.Ref<HTMLElement>;\n}\n\nclass CurrencyInput extends PureComponent<IInputProps> {\n  static defaultProps = {\n    onChange: noop,\n    getRef: noop\n  };\n\n  handleChange = ({ value }: { value: string }) => {\n    const { name, prefix } = this.props;\n\n    const newVal = prefix === '-' ? value.slice(prefix.length) : value;\n\n    if (+newVal !== this.props.value) {\n      this.props.onChange(null, { value: newVal, name });\n    }\n  };\n\n  render() {\n    const { prefix, name, value, getRef } = this.props;\n\n    return (\n      <ClassNames>\n        {({ css }) => (\n          <NumberFormat\n            getInputRef={getRef}\n            className={generateClassName(css)}\n            decimalScale={2}\n            allowNegative={false}\n            maxLength={14}\n            name={name}\n            thousandSeparator={true}\n            prefix={prefix}\n            value={value || ''}\n            onValueChange={this.handleChange}\n          />\n        )}\n      </ClassNames>\n    );\n  }\n}\n\nexport default CurrencyInput;\n","export default {\n  shadow: 'rgba(0, 0, 0, 0.25)',\n  blue1: '#3f90ea',\n  blue2: '#337dce',\n  pink1: '#eb008d',\n  pink2: '#d2007e',\n  pink3: '#CA0076',\n  red1: '#cd0a2c'\n};\n","import styled from '@emotion/styled';\nimport colors from '../../../constants/colors';\nimport { FieldType } from '../../../types';\n\nexport const Row = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const ExchangeBlock = styled.div`\n  box-sizing: border-box;\n  padding: 40px 50px 46px;\n  display: flex;\n  flex-wrap: wrap;\n  font-size: 26px;\n  color: white;\n`;\n\nexport const Wrapper = styled.div<{ type: FieldType }>(props =>\n  props.type === FieldType.Source\n    ? `\n        background-color: ${colors.blue1};\n        position: relative;\n        \n        &:after {\n          content: '';\n          display: block;\n          position: absolute;\n          left: 50%;\n          top: 100%;\n          transform: translate(-50%, -50%) rotate(45deg);\n          width: 20px;\n          height: 20px;\n          background-color: inherit;\n        }\n        `\n    : `\n          background-color: ${colors.blue2};\n        `\n);\n\nexport const SecondaryText = styled.div`\n  margin-top: 10px;\n  font-size: 12px;\n  color: white;\n  opacity: 0.7;\n`;\n","import React, { PureComponent } from 'react';\nimport SlickSlider from 'react-slick';\nimport styled from '@emotion/styled';\n\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\nimport './slick-theme.css';\nimport noop from '../../utils/noop';\n\nexport const Slide = styled.div`\n  outline: none !important;\n`;\n\ninterface ISliderProps {\n  onSlide: (index: number) => void;\n  currentSlide: number;\n  speed: number;\n}\n\nclass Slider extends PureComponent<ISliderProps> {\n  static defaultProps = {\n    onSlide: noop,\n    currentSlide: 0,\n    speed: 250\n  };\n\n  private slider?: SlickSlider;\n  private scrollBlock?: Element | null;\n\n  componentDidUpdate(prevProps: ISliderProps) {\n    const { currentSlide } = this.props;\n\n    // slider API is too tricky, there is no other possibility to change slide\n    if (this.props.currentSlide !== prevProps.currentSlide) {\n      this.slider && this.slider.slickGoTo(currentSlide);\n    }\n  }\n\n  refSlider = (el: SlickSlider) => {\n    this.slider = el;\n  };\n\n  refScrollBlock = (el: Element | null) => {\n    if (el) {\n      this.scrollBlock = el.querySelector('.slick-list');\n    }\n  };\n\n  handleChange = (i: number): void => {\n    if (this.scrollBlock) {\n      // fix the bug with shifted scroll position by reason of focusing on the input\n      this.scrollBlock.scrollLeft = 0;\n    }\n\n    this.props.onSlide(i);\n  };\n\n  render() {\n    const { currentSlide, children, speed } = this.props;\n\n    return (\n      <div ref={this.refScrollBlock}>\n        <SlickSlider\n          ref={this.refSlider}\n          dots\n          arrows\n          speed={speed}\n          initialSlide={currentSlide}\n          infinite={false}\n          afterChange={this.handleChange}\n        >\n          {React.Children.map(children, (child: React.ReactNode) => (\n            <Slide>{child}</Slide>\n          ))}\n        </SlickSlider>\n      </div>\n    );\n  }\n}\n\nexport default Slider;\n","import { TCurrency } from '../types';\n\nexport const EXCHANGE_API = 'https://api.exchangeratesapi.io';\nexport const DEFAULT_CURRENCY_ORDER: Array<TCurrency> = [\n  'RUB',\n  'USD',\n  'EUR',\n  'GBP'\n];\n","import React, { PureComponent } from 'react';\nimport { TCurrency, IFieldCallback, FieldType } from '../../../types';\nimport formatMoney from '../../../utils/formatMoney';\nimport CurrencyInput from '../../CurrencyInput/CurrencyInput';\nimport {\n  ExchangeBlock,\n  Row,\n  SecondaryText,\n  Wrapper\n} from './WidgetBlock.style';\nimport { TPockets } from '../../../store';\nimport Slider from '../../Slider/Slider';\nimport memoize from 'memoizee';\n\nimport { DEFAULT_CURRENCY_ORDER } from '../../../constants/common';\nimport noop from '../../../utils/noop';\n\ninterface IBlockProps {\n  type: FieldType;\n  currency: TCurrency;\n  pockets: TPockets;\n  inputValue?: number | null;\n  onCurrencyChange: (type: FieldType, value: TCurrency) => void;\n  onAmountChange?: IFieldCallback;\n  valueFieldName: string;\n  extraContent?: React.ReactNode;\n}\n\nclass WigdetBlock extends PureComponent<IBlockProps> {\n  static defaultProps = {\n    onCurrencyChange: noop\n  };\n\n  private inputRefs: { [key in TCurrency]?: HTMLElement } = {};\n\n  componentDidMount() {\n    const { type, currency } = this.props;\n\n    // focusing on first input after widget initialization\n    if (type === FieldType.Source) {\n      this.focusInput(currency);\n    }\n  }\n\n  handleSlideClick = (event: React.SyntheticEvent<HTMLElement>): void => {\n    this.focusInput(event.currentTarget.dataset['currency'] as TCurrency);\n  };\n\n  handleSlide = (index: number): void => {\n    const { type } = this.props;\n\n    const newCurrency = DEFAULT_CURRENCY_ORDER[index];\n\n    this.props.onCurrencyChange(type, newCurrency);\n\n    this.focusInput(newCurrency);\n  };\n\n  focusInput(currency: TCurrency): void {\n    const ref = this.inputRefs[currency];\n\n    ref && ref.focus();\n  }\n\n  setInputRef = memoize(\n    (currency: TCurrency) => (ref: HTMLElement): void => {\n      this.inputRefs[currency] = ref;\n    },\n    { primitive: true }\n  );\n\n  renderSlide = (currency: TCurrency) => {\n    const {\n      pockets,\n      type,\n      inputValue,\n      onAmountChange,\n      valueFieldName,\n      extraContent\n    } = this.props;\n\n    return (\n      <ExchangeBlock\n        key={currency}\n        data-currency={currency}\n        onClick={this.handleSlideClick}\n      >\n        <Row>\n          <div>{currency}</div>\n          <CurrencyInput\n            getRef={this.setInputRef(currency)}\n            prefix={type === FieldType.Source ? '-' : '+'}\n            name={valueFieldName}\n            value={inputValue}\n            onChange={onAmountChange}\n          />\n        </Row>\n        <Row>\n          <SecondaryText>\n            You have&nbsp;\n            {formatMoney(pockets[currency], currency, {\n              fractions: 'always'\n            })}\n          </SecondaryText>\n\n          <SecondaryText>{extraContent}</SecondaryText>\n        </Row>\n      </ExchangeBlock>\n    );\n  };\n\n  render() {\n    const { currency, type } = this.props;\n\n    return (\n      <Wrapper type={type}>\n        <Slider\n          currentSlide={DEFAULT_CURRENCY_ORDER.indexOf(currency)}\n          onSlide={this.handleSlide}\n        >\n          {DEFAULT_CURRENCY_ORDER.map(this.renderSlide)}\n        </Slider>\n      </Wrapper>\n    );\n  }\n}\nexport default WigdetBlock;\n","import styled from '@emotion/styled';\nimport colors from '../../constants/colors';\n\nexport const Content = styled.div`\n  border-radius: 6px;\n  overflow: hidden;\n  box-shadow: 0 24px 32px ${colors.shadow};\n`;\n\nexport const ErrorString = styled.div`\n  margin-top: 8px;\n  min-height: 14px;\n  font-size: 14px;\n  text-align: center;\n  color: ${colors.red1};\n`;\n","import styled from '@emotion/styled';\nimport colors from '../../../constants/colors';\n\nexport const Button = styled.button<{ success: boolean }>`\n  margin: 20px auto 0;\n  display: block;\n  border-radius: 40px;\n  height: 46px;\n  width: 160px;\n  font-size: 18px;\n  border: none;\n  text-align: center;\n  background-color: ${colors.pink1};\n  color: white;\n  transition: all 0.25s ease;\n  cursor: pointer;\n  outline: none;\n  position: relative;\n\n  :disabled {\n    opacity: ${({ success }) => (success ? 1 : 0.25)};\n    pointer-events: none;\n  }\n\n  :hover {\n    background-color: ${colors.pink2};\n  }\n\n  :active {\n    background-color: ${colors.pink3};\n  }\n`;\n\nexport const CheckIcon = styled.svg<{ success: boolean }>`\n  width: 24px;\n  height: 24px;\n  stroke: currentColor;\n  fill: currentColor;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transition: all 0.225s ease-in-out;\n  transform: translate(-50%, -50%) scale(${({ success }) => (success ? 1 : 0)});\n  transition-delay: ${({ success }) => (success ? '0.1s' : 0)};\n  opacity: ${({ success }) => (success ? 1 : 0)};\n`;\n\nexport const Text = styled.span<{ success: boolean }>`\n  transition: opacity ${({ success }) => (success ? '.15s' : '0.3s')}\n    ease-in-out;\n  transition-delay: ${({ success }) => (success ? 0 : '0.28s')};\n  opacity: ${({ success }) => (success ? 0 : 1)};\n`;\n","import React, { PureComponent } from 'react';\nimport { Button, CheckIcon, Text } from './SubmitButton.style';\nimport noop from '../../../utils/noop';\n\ninterface IExchangeButtonProps {\n  disabled?: boolean;\n  onClick: (e: React.SyntheticEvent) => void;\n}\n\ninterface IExchangeButtonState {\n  success: boolean;\n}\n\nclass ExchnageButton extends PureComponent<\n  IExchangeButtonProps,\n  IExchangeButtonState\n> {\n  static defaultProps = {\n    onClick: noop\n  };\n\n  state = {\n    success: false\n  };\n\n  private timer?: number;\n\n  handleClick = (e: React.SyntheticEvent) => {\n    clearTimeout(this.timer);\n\n    this.setState({\n      success: true\n    });\n\n    this.timer = window.setTimeout(() => {\n      this.setState({\n        success: false\n      });\n    }, 800);\n\n    this.props.onClick(e);\n  };\n\n  render() {\n    const { disabled, children } = this.props;\n    const { success } = this.state;\n\n    return (\n      <Button success={success} disabled={disabled} onClick={this.handleClick}>\n        <Text success={success}>{children}</Text>\n        <CheckIcon success={success} viewBox=\"0 0 24 24\">\n          <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\" />\n        </CheckIcon>\n      </Button>\n    );\n  }\n}\n\nexport default ExchnageButton;\n","export enum ActionType {\n  RATES_REQUEST = 'RATES_REQUEST',\n  RATES_REQUEST_SUCCESS = 'RATES_REQUEST_SUCCESS',\n\n  SOURCE_CURRENCY_CHANGE = 'SOURCE_CURRENCY_CHANGE',\n  TARGET_CURRENCY_CHANGE = 'TARGET_CURRENCY_CHANGE',\n\n  EXCHANGE = 'EXCHANGE'\n}\n","import React from 'react';\nimport ExchangeBlock from './WidgetBlock/WidgetBlock';\nimport { TCurrency, IFieldCallback, FieldType } from '../../types';\nimport { Content, ErrorString } from './ExchangeWidget.style';\nimport { TPockets } from '../../store';\nimport formatMoney from '../../utils/formatMoney';\nimport ExchnageButton from './SubmitButton/SubmitButton';\n\ninterface IWidgetProps {\n  pockets: TPockets;\n  rate?: number;\n  sourceCurrency: TCurrency;\n  targetCurrency: TCurrency;\n  sourceAmount?: number | null;\n  targetAmount?: number | null;\n  valid: boolean;\n  errorMsg?: string;\n\n  onCurrencyChange: (type: FieldType, value: TCurrency) => void;\n  onAmountChange?: IFieldCallback;\n  onExchange: () => void;\n}\n\nclass ExchangeWidget extends React.PureComponent<IWidgetProps> {\n  render() {\n    const {\n      pockets,\n      sourceCurrency,\n      targetCurrency,\n      sourceAmount,\n      targetAmount,\n      rate,\n      onCurrencyChange,\n      onAmountChange,\n      onExchange,\n      valid,\n      errorMsg\n    } = this.props;\n\n    return (\n      <div>\n        <Content>\n          <ExchangeBlock\n            valueFieldName={'sourceAmount'}\n            type={FieldType.Source}\n            pockets={pockets}\n            currency={sourceCurrency}\n            inputValue={sourceAmount}\n            onCurrencyChange={onCurrencyChange}\n            onAmountChange={onAmountChange}\n          />\n          <ExchangeBlock\n            valueFieldName={'targetAmount'}\n            type={FieldType.Target}\n            pockets={pockets}\n            currency={targetCurrency}\n            inputValue={targetAmount}\n            onCurrencyChange={onCurrencyChange}\n            onAmountChange={onAmountChange}\n            extraContent={\n              !!rate &&\n              `${formatMoney(1, targetCurrency)} = ${formatMoney(\n                1 / rate,\n                sourceCurrency\n              )}`\n            }\n          />\n        </Content>\n\n        <ExchnageButton disabled={!valid} onClick={onExchange}>\n          Exchange\n        </ExchnageButton>\n        <ErrorString>{errorMsg}</ErrorString>\n      </div>\n    );\n  }\n}\n\nexport default ExchangeWidget;\n","import { Dispatch } from 'redux';\nimport { EXCHANGE_API } from '../constants/common';\nimport { ActionType } from './ActionTypes';\nimport { IStoreState } from '../store';\n\nexport default function updateRates() {\n  return (dispatch: Dispatch, getState: () => IStoreState) => {\n    const { sourceCurrency } = getState().exchange;\n\n    dispatch({\n      type: ActionType.RATES_REQUEST,\n      payload: { baseCurrency: sourceCurrency }\n    });\n\n    return fetch(`${EXCHANGE_API}/latest?base=${sourceCurrency}`)\n      .then(response => response.json())\n      .then(({ rates = {} }) => {\n        const { RUB, EUR, USD, GBP } = rates;\n\n        return { RUB, EUR, USD, GBP };\n      })\n      .then(rates =>\n        dispatch({\n          type: ActionType.RATES_REQUEST_SUCCESS,\n          payload: { rates, baseCurrency: sourceCurrency }\n        })\n      );\n  };\n}\n","import { ActionType } from './ActionTypes';\nimport { FieldType, TCurrency } from '../types';\nimport { Dispatch, IStoreState } from '../store';\nimport updateRates from './updateRates';\nimport { DEFAULT_CURRENCY_ORDER } from '../constants/common';\n\nfunction getNextCurrency(currency: TCurrency): TCurrency {\n  return DEFAULT_CURRENCY_ORDER[\n    (DEFAULT_CURRENCY_ORDER.indexOf(currency) + 1) %\n      DEFAULT_CURRENCY_ORDER.length\n  ];\n}\n\nexport default function changeCurrency(type: FieldType, currency: TCurrency) {\n  return (dispatch: Dispatch, getState: () => IStoreState) => {\n    dispatch({\n      type:\n        type === FieldType.Source\n          ? ActionType.SOURCE_CURRENCY_CHANGE\n          : ActionType.TARGET_CURRENCY_CHANGE,\n      payload: { currency }\n    });\n\n    dispatch(updateRates());\n\n    const state = getState();\n    const oppositeCurrency =\n      state.exchange[\n        type === FieldType.Source ? 'targetCurrency' : 'sourceCurrency'\n      ];\n\n    // if currencies are same we need to change one of them\n    if (oppositeCurrency === currency) {\n      dispatch({\n        type:\n          type === FieldType.Source\n            ? ActionType.TARGET_CURRENCY_CHANGE\n            : ActionType.SOURCE_CURRENCY_CHANGE,\n        payload: { currency: getNextCurrency(oppositeCurrency) }\n      });\n    }\n  };\n}\n","function path(obj: any, paths: Array<string | number>): any {\n  let val = obj;\n  let idx = 0;\n\n  while (idx < paths.length) {\n    if (val == null) {\n      return;\n    }\n\n    val = val[paths[idx]];\n    idx += 1;\n  }\n\n  return val;\n}\n\nexport default path;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ExchangeWidget from './ExchangeWidget';\nimport { IStoreState, TPockets } from '../../store';\nimport updateRates from '../../actions/updateRates';\nimport { FieldType, IAction, IFieldCallback, TCurrency } from '../../types';\nimport { ThunkDispatch } from 'redux-thunk';\nimport changeCurrency from '../../actions/changeCurrency';\nimport path from '../../utils/path';\nimport memoize from 'memoizee';\nimport exchange from '../../actions/exchange';\n\nconst UPDATE_INTERVAL = 10000;\n\ntype AmountFieldName = 'sourceAmount' | 'targetAmount';\n\nconst getOppositeFieldName = (name: AmountFieldName): AmountFieldName =>\n  name === 'targetAmount' ? 'sourceAmount' : 'targetAmount';\n\ninterface IWidgetContainerProps {\n  pockets: TPockets;\n  rate?: number;\n  sourceCurrency: TCurrency;\n  targetCurrency: TCurrency;\n  sourceAmount?: number;\n  targetAmount?: number;\n  valid?: boolean;\n  errorMsg?: string;\n\n  onCurrencyChange: (type: FieldType, value: TCurrency) => void;\n  onAmountChange?: IFieldCallback;\n  onExchange: (\n    sourceCurrency: TCurrency,\n    sourceAmount: number,\n    targetCurrency: TCurrency,\n    targetAmount: number\n  ) => void;\n  updateRates: () => void;\n}\n\ninterface IWidgetContainerState {\n  sourceAmount?: number | null;\n  targetAmount?: number | null;\n  lastUpdatedField?: AmountFieldName;\n}\n\nclass ExchangeWidgetContainer extends Component<\n  IWidgetContainerProps,\n  IWidgetContainerState\n> {\n  private updateTimer?: number;\n\n  state: IWidgetContainerState = {};\n\n  componentDidMount() {\n    this.props.updateRates();\n    this.updateTimer = window.setInterval(\n      this.props.updateRates,\n      UPDATE_INTERVAL\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.updateTimer);\n  }\n\n  componentDidUpdate(prevProps: IWidgetContainerProps) {\n    const { lastUpdatedField } = this.state;\n\n    if (this.props.rate !== prevProps.rate && lastUpdatedField) {\n      this.calcAmount(getOppositeFieldName(lastUpdatedField));\n    }\n  }\n\n  handleAmountChange: IFieldCallback = (e, { value, name }) => {\n    if (!name) {\n      return;\n    }\n\n    this.setState(\n      {\n        [name]: value.length ? +value : undefined,\n        lastUpdatedField: name as AmountFieldName\n      },\n      () => {\n        this.calcAmount(getOppositeFieldName(name as AmountFieldName));\n      }\n    );\n  };\n\n  calcAmount(fieldName: AmountFieldName) {\n    const { rate } = this.props;\n    const oppositeVal = this.state[getOppositeFieldName(fieldName)];\n\n    if (!rate) {\n      return;\n    }\n\n    let realRate = fieldName === 'sourceAmount' ? 1 / rate : rate;\n    const val = !oppositeVal\n      ? null\n      : Math.round(oppositeVal * realRate * 100) / 100;\n\n    this.setState({\n      [fieldName]: val\n    });\n  }\n\n  handleExchange = () => {\n    const { sourceAmount, targetAmount } = this.state;\n    const { sourceCurrency, targetCurrency } = this.props;\n\n    this.props.onExchange(\n      sourceCurrency,\n      sourceAmount || 0,\n      targetCurrency,\n      targetAmount || 0\n    );\n\n    this.setState({\n      sourceAmount: null,\n      targetAmount: null\n    });\n  };\n\n  validate = memoize(\n    (\n      sourceCurrency: TCurrency,\n      pockets: TPockets,\n      sourceAmount?: number | null,\n      targetAmount?: number | null\n    ): { valid: boolean; errorMsg?: string } => {\n      if (!sourceAmount || !targetAmount) {\n        return { valid: false };\n      }\n      if (sourceAmount > pockets[sourceCurrency]) {\n        return {\n          valid: false,\n          errorMsg: 'Not enough money'\n        };\n      }\n\n      return { valid: true };\n    },\n    { max: 1 }\n  );\n\n  render() {\n    const { sourceCurrency, pockets } = this.props;\n    const { sourceAmount, targetAmount } = this.state;\n\n    return (\n      <ExchangeWidget\n        {...this.props}\n        {...this.validate(sourceCurrency, pockets, sourceAmount, targetAmount)}\n        sourceAmount={this.state.sourceAmount}\n        targetAmount={this.state.targetAmount}\n        onAmountChange={this.handleAmountChange}\n        onExchange={this.handleExchange}\n      />\n    );\n  }\n}\n\nexport default connect(\n  (state: IStoreState) => {\n    const { pockets, exchange } = state;\n\n    return {\n      pockets,\n      rate: path(state, [\n        'rates',\n        exchange.sourceCurrency,\n        exchange.targetCurrency\n      ]),\n      sourceCurrency: exchange.sourceCurrency,\n      targetCurrency: exchange.targetCurrency\n    };\n  },\n  (dispatch: ThunkDispatch<IStoreState, any, IAction>) => ({\n    onExchange: (\n      sourceCurrency: TCurrency,\n      sourceAmount: number,\n      targetCurrency: TCurrency,\n      targetAmount: number\n    ) =>\n      dispatch(\n        exchange(sourceCurrency, sourceAmount, targetCurrency, targetAmount)\n      ),\n    onCurrencyChange: (type: FieldType, value: TCurrency) => {\n      dispatch(changeCurrency(type, value));\n    },\n    updateRates: () => dispatch(updateRates())\n  })\n)(ExchangeWidgetContainer);\n","import { TCurrency } from '../types';\nimport { Dispatch } from 'redux';\nimport { ActionType } from './ActionTypes';\n\nexport default function exchange(\n  sourceCurrency: TCurrency,\n  sourceAmount: number,\n  targetCurrency: TCurrency,\n  targetAmount: number\n) {\n  return (dispatch: Dispatch) => {\n    dispatch({\n      type: ActionType.EXCHANGE,\n      payload: {\n        sourceCurrency,\n        sourceAmount,\n        targetCurrency,\n        targetAmount\n      }\n    });\n  };\n}\n","import { IAction } from '../../types';\nimport { ActionType } from '../../actions/ActionTypes';\nimport { TRates } from '../index';\n\nexport const initState = {};\n\nfunction rates(state: TRates = initState, action: IAction) {\n  switch (action.type) {\n    case ActionType.RATES_REQUEST_SUCCESS: {\n      const { rates, baseCurrency } = action.payload;\n\n      return {\n        ...state,\n        [baseCurrency]: rates\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default rates;\n","import { IAction, TCurrency } from '../../types';\nimport { TPockets } from '../index';\nimport { ActionType } from '../../actions/ActionTypes';\n\nexport const initState: TPockets = {\n  RUB: 1000500.34,\n  USD: 800.7,\n  EUR: 600,\n  GBP: 70.5\n};\n\nfunction pockets(state: TPockets = initState, action: IAction) {\n  switch (action.type) {\n    case ActionType.EXCHANGE: {\n      const {\n        sourceCurrency,\n        sourceAmount,\n        targetCurrency,\n        targetAmount\n      } = action.payload;\n\n      return {\n        ...state,\n        [sourceCurrency]: state[sourceCurrency as TCurrency] - sourceAmount,\n        [targetCurrency]: state[targetCurrency as TCurrency] + targetAmount\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default pockets;\n","import { IAction } from '../../types';\nimport { ActionType } from '../../actions/ActionTypes';\n\nexport const initState = {\n  sourceCurrency: 'RUB',\n  targetCurrency: 'EUR'\n};\n\nfunction exchange(state = initState, action: IAction) {\n  switch (action.type) {\n    case ActionType.SOURCE_CURRENCY_CHANGE: {\n      return {\n        ...state,\n        sourceCurrency: action.payload.currency\n      };\n    }\n\n    case ActionType.TARGET_CURRENCY_CHANGE: {\n      return {\n        ...state,\n        targetCurrency: action.payload.currency\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default exchange;\n","import { combineReducers } from 'redux';\nimport rates from './rates';\nimport pockets from './pockets';\nimport exchange from './exchange';\n\nconst rootReducer = combineReducers({\n  rates,\n  pockets,\n  exchange\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware, { ThunkDispatch } from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { IAction, TCurrency } from '../types';\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport type Dispatch = ThunkDispatch<IStoreState, any, IAction>;\n\nexport type TPockets = {\n  [id in TCurrency]: number;\n};\n\nexport type TRates = {\n  [key in TCurrency]?: {\n    [key in TCurrency]: number;\n  };\n};\n\nexport interface IStoreState {\n  pockets: TPockets;\n  exchange: {\n    sourceCurrency: TCurrency;\n    targetCurrency: TCurrency;\n  };\n  rates: TRates;\n}\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunkMiddleware))\n);\n\nexport default store;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport ExchangeWidget from '../ExchangeWidget/ExchangeWidgetContainer';\nimport { Provider } from 'react-redux';\nimport store from '../../store';\n\nconst Container = styled.div`\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 6px;\n`;\n\nconst Content = styled.div`\n  max-width: 440px;\n  width: 100%;\n`;\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Container>\n        <Content>\n          <ExchangeWidget />\n        </Content>\n      </Container>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\n\nimport 'reset-css';\nimport './global.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}